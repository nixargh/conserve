#!/usr/bin/ruby
#### INFO ######################################################################
# Conserve
# script for backup
# (*w) author: nixargh <nixargh@gmail.com>
$version = '0.2.0.3'
#### SETTINGS ##################################################################
$debug = false
$lib_dir = '/usr/lib/conserve'
ENV['PATH'] = "#{ENV['PATH']}:/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin"
#### REQUIRE ###################################################################
require 'fileutils'

#### CLASES ####################################################################
def add_classes!
	require 'LVM_operate'
	require 'Backup'
	require 'Operate'
	require 'Inform'
	require 'Ruby_gems'
	require 'Log'
	require 'Collector'
end

#### FUNCTIONS #################################################################
def s_to_a(string)
	if string.kind_of?(Array)
		string
	elsif string.kind_of?(String)
		array = string.split("\n")
	else
		raise "#{string} isn't string or array"
	end
end

def parse_path(path)
	begin
		status = 0
		error = nil
		server = nil
		file = nil
		if path != nil && path != 'module'
			path.gsub!('\\', '/')
			if path.index('|')
				path = path.split('|')
				server = path[0]
				path = path[1]
				file = File.basename(path)
				directory = File.dirname(path)
			else
				file = File.basename(path)
				if File.directory?(path)
					directory = path
					file = nil
				elsif File.directory?(file)
					directory = "#{File.dirname(path)}/#{file}"
				else
					directory = File.dirname(path)
				end
				if 	File.exist?(directory) && File.directory?(directory)
				else
					raise "Can't find directory - #{directory}"
				end
			end
		elsif path != nil && path == 'module'
		else
			raise "path is \"nil\""
		end
	rescue
		status = 1
		error = $!
	end
	result = [status, error, server, directory, file]
end

def colorize(text, color_code)
  "#{color_code}#{text}\e[0m"
end

def red(text); colorize(text, "\e[31m"); end
def green(text); colorize(text, "\e[32m"); end
def yellow(text); colorize(text, "\e[33m"); end
def sky_blue(text); colorize(text, "\e[36m"); end

def format_size(bytes_size)
	fromated_size = nil
	if bytes_size != nil
		units = ['b', 'Kb', 'Mb', 'Gb', 'Tb']
		index = 0
		size = bytes_size
		until (size / 1024) <= 1
			index += 1
			size = size / 1024
		end
		fromated_size = "#{size.round} #{units[index]}"
	end
	fromated_size
end
#### PROGRAM ###################################################################
begin
	$LOAD_PATH.unshift($lib_dir)
	$LOAD_PATH.unshift("./lib")
	add_classes!
	$log = Log.new
	$operate = Operate.new
	if (read_arg_result = $operate.read_arguments)[0] == 0
		result = $operate.action
		raise result[1] if result[0] != 0
	else
		raise read_arg_result[1]
	end
rescue => detail
	@log.write(detail.backtrace.join("\n")) if $debug
	$global_error = $!
	$log.write("\t#{red("Error:")} #{yellow($global_error)}")
ensure
	$operate.ensure
end
