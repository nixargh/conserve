#!/usr/bin/ruby
#### INFO ######################################################################
# Conserve - linux backup tool.
# (*w) author: nixargh <nixargh@gmail.com>
$version = '0.2.0.4'
#### SETTINGS ##################################################################
#### REQUIRE ###################################################################
require 'fileutils'
#### CLASES ####################################################################
class Conserve
	def initialize
		@debug = false
		@lib_dir = '/usr/lib/conserve'
		ENV['PATH'] = "#{ENV['PATH']}:/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin"
		@params = nil
		@log = nil
		@error = nil
	end

	def run # run all that staff
		begin
			load_libraries!
			parse_arguments!
			start_logging!
			collect_sysinfo!
			start_backup!
		rescue
			if @log
				@error = $!
				@log.write_noel("Conserve#run error: ", 'red')
				@log.write(@error, 'yellow')
				@log.write(@error.backtrace, 'sky_blue') if @debug
			end
		ensure
			inform! if @params['inform']
		end
	end

	private

	def load_libraries! # loads additional Classses
		$LOAD_PATH.unshift("./lib")
		$LOAD_PATH.unshift(@lib_dir)
		require 'add_functions'
		require 'lvm_operate'
		require 'backup'
		require 'operate'
		require 'inform'
		require 'ruby_gems'
		require 'log'
		require 'collector'
	end

	def parse_arguments! # parse command line arguments
		operate = Operate.new
		@params = operate.read_arguments
		@debug = @params['debug']
		puts @params if @debug
	end

	def start_logging! # configure output
		log = Log.new
		if @params['log_enabled']
			log.enable # start log to file instead of stdout
			log.file = @params['log_file']
		end
		@log = log
		if @debug
			@log.write_noel("Logging started.", 'yellow')
			@params['log_enabled'] ? @log.write(" Logging to file - #{log.file}.") : @log.write
		end
	end

	def collect_sysinfo! # collect system information about disk, raids, partitions, lvm and mounts
		collector = Collector.new
		@sysinfo = collector.collect
		@log.write("SysInfo collected.", 'yellow') if @debug
	end

	def start_backup!
		@log.write("Backup started.", 'yellow') if @debug
		backup = Backup.new(@params['source'], @params['destination'])
		backup.log = @log
		backup.mbr = true if @params['mbr']
		backup.use_lvm = false if @params['use_lvm'] == false
		backup.mount_point = @params['mount_point'] if @params['mount_point']
		backup.credential_file = @params['cred_file'] if @params['cred_file']
		backup.archive = true if @params['archive']
		backup.create!
	end

	def inform!
		@log.write("Inform started.", 'yellow') if @debug
		check_inform_gems!
		inform = Inform.new
		inform.log = @log
		@params['job_name'] ? (inform.job_name = @params['job_name']) : (inform.job_name = "Conserve Backup Job")
		inform.config_file = @params['inform']
		inform.error = @error
		inform.run!
	end

	def check_inform_gems!
		@log.write("Checking ruby gems for Inform.", 'yellow') if @debug
		ruby_gems = Ruby_gems.new
		if !ruby_gems.check_rubygems
			text = "\t\t\"ruby gem\" utility not installed. Inform function require it."
			@log.write(text)
			puts text
			ruby_gems.install_rubygems
		end
		if !ruby_gems.gem_installed?('mail')
			text = "\t\t\"mail\" ruby gem not installed. Inform function require it."
			@log.write(text, 'red')
			puts text
			ruby_gems.install_mail_gem
		end
		if ruby_gems.check_rubygems
			require 'rubygems'
			if  ruby_gems.gem_installed?('mail')
				require 'mail'
			else
				raise "\"mail\" ruby gem not installed"
			end
		else
			raise "\"ruby gem\" utility not installed"
		end
	end

end
#### FUNCTIONS #################################################################
#### PROGRAM ###################################################################
begin
	conserve = Conserve.new
	conserve.run
rescue
	puts "Conserve: #{$!}"
	puts $!.backtrace
	exit 1
end

#		@backup.ensure if @backup != nil
#		if @inform != nil
#			inform = Inform.new
#		end
#	end
