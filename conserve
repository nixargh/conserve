#!/usr/bin/ruby
#### INFO ######################################################################
# Conserve - linux backup tool.
# (*w) author: nixargh <nixargh@gmail.com>
$version = '0.2.0.4'
#### SETTINGS ##################################################################
#### REQUIRE ###################################################################
require 'fileutils'
#### CLASES ####################################################################
class Conserve
	attr_accessor :debug

	def initialize
		@debug = false
		@lib_dir = '/usr/lib/conserve'
		ENV['PATH'] = "#{ENV['PATH']}:/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin"
		@params = nil
		@log = nil
	end

	def run # run all that staff
		begin
			load_libraries!
			parse_arguments!
			start_logging!
			collect_sysinfo!
			start_backup!
		rescue
			if @log
				@log.write_noel("Conserve#run error: ", 'red')
				@log.write($!, 'yellow')
				@log.write($!.backtrace, 'sky_blue')
			end
		end
	end

	private

	def load_libraries! # loads additional Classses
		$LOAD_PATH.unshift("./lib")
		$LOAD_PATH.unshift(@lib_dir)
		require 'add_functions'
		require 'lvm_operate'
		require 'backup'
		require 'operate'
		require 'inform'
		require 'ruby_gems'
		require 'log'
		require 'collector'
	end

	def parse_arguments! # parse command line arguments
		operate = Operate.new
		@params = operate.read_arguments
		@debug = @params['debug']
		puts @params if @debug
	end

	def start_logging! # configure output
		log = Log.new
		if @params['log_enabled']
			log.enable # start log to file instead of stdout
			log.file = @params['log_file']
		end
		@log = log
		if @debug
			@log.write_noel("\tLogging started.", 'yellow')
			@params['log_enabled'] ? @log.write(" Logging to file - #{log.file}.") : @log.write
		end
	end

	def collect_sysinfo! # collect system information about disk, raids, partitions, lvm and mounts
		collector = Collector.new
		@sysinfo = collector.collect
		@log.write("\tSysInfo collected.", 'yellow')
	end

	def start_backup!
		@log.write("\tBackup started.", 'yellow')
		backup = Backup.new(@params['source'], @params['destination'])
		backup.log = @log
		backup.mbr = true if @params['mbr']
		backup.use_lvm = false if @params['use_lvm'] == false
		backup.mount_point = @params['mount_point'] if @params['mount_point']
		backup.credential_file = @params['cred_file'] if @params['cred_file']
		backup.archive = true if @params['archive']
		backup.create
	end
end
#### FUNCTIONS #################################################################
#### PROGRAM ###################################################################
begin
	conserve = Conserve.new
	conserve.run
rescue
	puts "\t#{$!}"
	puts $!.backtrace if conserve.debug
	exit 1
end


	def action()
		begin
			status = 0
			error = nil
			$job_name = 'Default Backup Job Name' if $job_name == nil
			if @log_enabled == true
				$log.log_enabled = true
				$log.log_file = @log_file
			end
			@backup = Backup.new(@source,@destination)
			@backup.mbr = true if @mbr == true
			@backup.use_lvm = false if @use_lvm == false
			@backup.mount_point = @mountdir if @mountdir != nil
			@backup.credential_file = @cred_file if @cred_file != nil
			@backup.archive = true if @archive == true
			@backup.create
		rescue
			status = 1
			error = $!
		end
		result = [status, error]
	end

	def ensure
		@backup.ensure if @backup != nil
		if @inform != nil
			inform = Inform.new
			inform.config_file = @inform
			inform.run
		end
	end
